go.property("speed", 200)

local LEFT = hash("left")
local RIGHT = hash("right")
local TOUCH = hash("touch")
local SHOOT = hash("shoot")
local PROFILER = hash("profiler")

local MODEL = "#rivemodel"

local function shoot(self)
	local p = go.get_world_position(weapon) - vmath.vector3(10, 0, 0)
	local bullet = factory.create("factories#bullet", p)

	local q = vmath.quat_rotation_z(math.rad((self.angle - 45) * 0.5))
	local v = vmath.rotate(q, vmath.vector3(0, 1000, 0))
	local to = p - v

	go.animate(bullet, "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_LINEAR, 0.7, 0, function()
		go.delete(bullet)
	end)

	go.set(MODEL, hash("Trigger 1"), true)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.input = vmath.vector3()
	self.angle = 0
	rive.play_state_machine(MODEL, "State Machine 1")
end

function update(self, dt)
	self.angle = self.angle + self.input.x * 180 * dt
	if self.angle > 90 then
		self.angle = 90
	elseif self.angle < 0 then
		self.angle = 0
	end
	go.set(MODEL, hash("Number 1"), self.angle)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("flower") then
			msg.post(".", "disable")
			timer.delay(2, false, function()
				sys.reboot()
			end)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == LEFT then
		self.input.x = -action.value
	elseif action_id == RIGHT then
		self.input.x = action.value
	elseif action_id == SHOOT then
		if action.released then
			shoot(self)
		end
	elseif action_id == PROFILER then
		if action.released then
			msg.post("@system:", "toggle_profile")
		end
	elseif action_id == TOUCH then
		-- touch movement and shooting
		local action_pos = vmath.vector3(action.x, action.y, 0)
		if action.pressed then
			self.pressed_pos = action_pos
			self.pressed_time = socket.gettime()
		elseif action.released then
			if socket.gettime() - self.pressed_time < 0.3 then
				shoot(self)
			end
			self.pressed_pos = nil
			self.input.x = 0
		elseif self.pressed_pos then
			if action_pos.x > self.pressed_pos.x then
				self.input.x = 1
			elseif action_pos.x < self.pressed_pos.x then
				self.input.x = -1
			else
				self.input.x = 0
			end
			self.pressed_pos = action_pos
		end
	elseif not action_id then
		-- mouse movement
		self.angle = 90 * action.x / sys.get_config_int("display.width", 640)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
